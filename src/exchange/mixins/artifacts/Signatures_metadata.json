{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "ECDSAInvalidSignature",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "ECDSAInvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "ECDSAInvalidSignatureS",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSignature",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldProxyFactory",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newProxyFactory",
						"type": "address"
					}
				],
				"name": "ProxyFactoryUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldSafeFactory",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newSafeFactory",
						"type": "address"
					}
				],
				"name": "SafeFactoryUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "getPolyProxyFactoryImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "getPolyProxyWalletAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getProxyFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "getSafeAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSafeFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSafeFactoryImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proxyFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "safeFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "orderHash",
						"type": "bytes32"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "salt",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "maker",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "taker",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "makerAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "takerAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "expiration",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "feeRateBps",
								"type": "uint256"
							},
							{
								"internalType": "enum Side",
								"name": "side",
								"type": "uint8"
							},
							{
								"internalType": "enum SignatureType",
								"name": "signatureType",
								"type": "uint8"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct Order",
						"name": "order",
						"type": "tuple"
					}
				],
				"name": "validateOrderSignature",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"ECDSAInvalidSignature()": [
					{
						"details": "The signature derives the `address(0)`."
					}
				],
				"ECDSAInvalidSignatureLength(uint256)": [
					{
						"details": "The signature has an invalid length."
					}
				],
				"ECDSAInvalidSignatureS(bytes32)": [
					{
						"details": "The signature has an S value that is in the upper half order."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"getPolyProxyWalletAddress(address)": {
					"params": {
						"_addr": "- The address that owns the proxy wallet"
					}
				},
				"getSafeAddress(address)": {
					"params": {
						"_addr": "- The address that owns the proxy wallet"
					}
				},
				"validateOrderSignature(bytes32,(uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes))": {
					"params": {
						"order": "- The order",
						"orderHash": "- The hash of the order"
					}
				}
			},
			"title": "Signatures",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getPolyProxyFactoryImplementation()": {
					"notice": "Gets the Polymarket Proxy factory implementation address"
				},
				"getPolyProxyWalletAddress(address)": {
					"notice": "Gets the Polymarket proxy wallet address for an address"
				},
				"getProxyFactory()": {
					"notice": "Gets the Proxy factory address"
				},
				"getSafeAddress(address)": {
					"notice": "Gets the Polymarket Gnosis Safe address for an address"
				},
				"getSafeFactory()": {
					"notice": "Gets the Safe factory address"
				},
				"getSafeFactoryImplementation()": {
					"notice": "Gets the Safe factory implementation address"
				},
				"proxyFactory()": {
					"notice": "The Polymarket Proxy Wallet Factory Contract"
				},
				"safeFactory()": {
					"notice": "The Polymarket Gnosis Safe Factory Contract"
				},
				"validateOrderSignature(bytes32,(uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,bytes))": {
					"notice": "Validates the signature of an order"
				}
			},
			"notice": "Maintains logic that defines the various signature types and validates them",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/exchange/mixins/Signatures.sol": "Signatures"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [
			":common/=src/common/",
			":creator/=src/creator/",
			":dev/=src/dev/",
			":exchange/=src/exchange/",
			":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
			":openzeppelin/=lib/openzeppelin-contracts/contracts/",
			":solmate/=lib/solmate/src/"
		]
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/IERC1271.sol": {
			"keccak256": "0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39",
			"license": "MIT",
			"urls": [
				"bzz-raw://c3c74009ce36136b36c77c23935b8e4a7b4f253be2da2be4fb4a916b1ce43743",
				"dweb:/ipfs/QmcH36v3iN7SJJuF73AunLR2LtNxhVJ1wm63ph4dPZ4pcL"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c",
				"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF"
			]
		},
		"src/exchange/interfaces/ISignatures.sol": {
			"keccak256": "0xebda841593e4e6adc6479ecc8c019c071c1ba241599c61b49bf2a77a674ac558",
			"license": "MIT",
			"urls": [
				"bzz-raw://259e6ce3aaebd89ad38d4e25b63861e92b879f979273524d6483939ce5fc545e",
				"dweb:/ipfs/QmRzTA2Bdu6NG2qMHVqXiwEYdbyuE3vXidpNMkUwzexAMd"
			]
		},
		"src/exchange/libraries/OrderStructs.sol": {
			"keccak256": "0x77c6e2c11bac9b60ab0c6b7d03ad11c829f176ba35f6418bbcefb10e8713d39a",
			"license": "MIT",
			"urls": [
				"bzz-raw://b0b31336ee6be3a2a5dec6676a76bfa3435d10085ae40c9d333e980dfbbe369b",
				"dweb:/ipfs/QmNjqk8xvq6VcxE3KPuGq3iv1RiLZUT3feqzq8wntSiZ2J"
			]
		},
		"src/exchange/libraries/PolyProxyLib.sol": {
			"keccak256": "0x61e523b9f2d66217963acf42086746db43823cda37b2fb3a6e46efd7727b668e",
			"license": "MIT",
			"urls": [
				"bzz-raw://250c6a90c192c041225244b9a91ee61cab4a8ba9834791d590d74b0f32c7ea36",
				"dweb:/ipfs/QmRy2yM3omqYAiB2KKFC5Rqv9dV3yPehoHUd2Sk9X8mdx7"
			]
		},
		"src/exchange/libraries/PolySafeLib.sol": {
			"keccak256": "0x38030ab9c88a7e87974e1e46c80f640452e3f0099043750c680a086455194bd2",
			"license": "MIT",
			"urls": [
				"bzz-raw://2fdb8f5e134b8a659c116794f6d698674ad629fb50a7889ee08f98230cce7f4d",
				"dweb:/ipfs/QmZjfP7LaE7yDCgDyHRzjmD22zJmouruVooH7xJRPfgGhM"
			]
		},
		"src/exchange/mixins/PolyFactoryHelper.sol": {
			"keccak256": "0x7a54482123cfb8eebb914cc43f12d656f2291209e5d6ae7f014545c3c8ee26b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://37c444e92d53a24f86e3a6531644141a5548df9a5d6da6fb1e615da4609590a7",
				"dweb:/ipfs/QmYUQMUhRDqJtYreY1GWpgq6GiTxWeBvJ4gQmBUkEoXuB4"
			]
		},
		"src/exchange/mixins/Signatures.sol": {
			"keccak256": "0x9131a7cfce500a8f8697f3d0445ad9704b51a88cbd17332e3d1ce3f7e3e6f030",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc519c3db8442c8adcc832a8740cd29a0eb8079a8b369b797d39a2748d761ff4",
				"dweb:/ipfs/QmUmDXbBFHaQqgQzDbrHJ1ACgiYFpLocf6xwZpzTNsCUr7"
			]
		}
	},
	"version": 1
}